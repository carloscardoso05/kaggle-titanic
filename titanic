{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\ntrain_file = '/kaggle/input/titanic/train.csv'\ndf = pd.read_csv(train_file)\ndf.head()","metadata":{"_uuid":"7724a796-6b92-4130-9a11-6b0ac49c5361","_cell_guid":"d168f100-1375-483f-bf1f-c54699f8ff76","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-09-26T00:29:02.516645Z","iopub.execute_input":"2024-09-26T00:29:02.517195Z","iopub.status.idle":"2024-09-26T00:29:02.549545Z","shell.execute_reply.started":"2024-09-26T00:29:02.517146Z","shell.execute_reply":"2024-09-26T00:29:02.548048Z"},"trusted":true},"execution_count":40,"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"Y = df.dropna()['Survived'].map({1: 'Sobreviveu',0:'Não sobreviveu'})\nY ","metadata":{"_uuid":"3c23828d-33cd-486b-ab14-bbb217ab1966","_cell_guid":"fc20ec99-9fc9-4f3b-bb92-320a29af9dd9","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-09-26T00:29:02.551913Z","iopub.execute_input":"2024-09-26T00:29:02.552390Z","iopub.status.idle":"2024-09-26T00:29:02.570302Z","shell.execute_reply.started":"2024-09-26T00:29:02.552347Z","shell.execute_reply":"2024-09-26T00:29:02.568710Z"},"trusted":true},"execution_count":41,"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"1          Sobreviveu\n3          Sobreviveu\n6      Não sobreviveu\n10         Sobreviveu\n11         Sobreviveu\n            ...      \n871        Sobreviveu\n872    Não sobreviveu\n879        Sobreviveu\n887        Sobreviveu\n889        Sobreviveu\nName: Survived, Length: 183, dtype: object"},"metadata":{}}]},{"cell_type":"code","source":"train = df.dropna()[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]\ntrain","metadata":{"_uuid":"d0812cf1-d040-4e2d-a00f-a57d0efa5b7e","_cell_guid":"f651ab3b-e557-46c0-9ed0-b1e284899041","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-09-26T00:29:02.572504Z","iopub.execute_input":"2024-09-26T00:29:02.572917Z","iopub.status.idle":"2024-09-26T00:29:02.610614Z","shell.execute_reply.started":"2024-09-26T00:29:02.572877Z","shell.execute_reply":"2024-09-26T00:29:02.608767Z"},"trusted":true},"execution_count":42,"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"     Pclass     Sex   Age  SibSp  Parch     Fare Embarked\n1         1  female  38.0      1      0  71.2833        C\n3         1  female  35.0      1      0  53.1000        S\n6         1    male  54.0      0      0  51.8625        S\n10        3  female   4.0      1      1  16.7000        S\n11        1  female  58.0      0      0  26.5500        S\n..      ...     ...   ...    ...    ...      ...      ...\n871       1  female  47.0      1      1  52.5542        S\n872       1    male  33.0      0      0   5.0000        S\n879       1  female  56.0      0      1  83.1583        C\n887       1  female  19.0      0      0  30.0000        S\n889       1    male  26.0      0      0  30.0000        C\n\n[183 rows x 7 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>1</td>\n      <td>male</td>\n      <td>54.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>51.8625</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>3</td>\n      <td>female</td>\n      <td>4.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>16.7000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>1</td>\n      <td>female</td>\n      <td>58.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>26.5500</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>871</th>\n      <td>1</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>52.5542</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>872</th>\n      <td>1</td>\n      <td>male</td>\n      <td>33.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5.0000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>879</th>\n      <td>1</td>\n      <td>female</td>\n      <td>56.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>83.1583</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>1</td>\n      <td>female</td>\n      <td>19.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>1</td>\n      <td>male</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n<p>183 rows × 7 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.preprocessing import OneHotEncoder\n\nohe = OneHotEncoder(handle_unknown='ignore', sparse_output=False).set_output(transform='pandas')\nencoded = ohe.fit_transform(train[['Sex', 'Embarked']])\nencoded","metadata":{"_uuid":"bd4eb650-ca0a-496b-924e-902629a78b66","_cell_guid":"3a9f34bd-12b6-46b8-b7b6-623246dc71d4","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-09-26T00:29:02.614027Z","iopub.execute_input":"2024-09-26T00:29:02.615540Z","iopub.status.idle":"2024-09-26T00:29:02.647250Z","shell.execute_reply.started":"2024-09-26T00:29:02.615474Z","shell.execute_reply":"2024-09-26T00:29:02.645062Z"},"trusted":true},"execution_count":43,"outputs":[{"execution_count":43,"output_type":"execute_result","data":{"text/plain":"     Sex_female  Sex_male  Embarked_C  Embarked_Q  Embarked_S\n1           1.0       0.0         1.0         0.0         0.0\n3           1.0       0.0         0.0         0.0         1.0\n6           0.0       1.0         0.0         0.0         1.0\n10          1.0       0.0         0.0         0.0         1.0\n11          1.0       0.0         0.0         0.0         1.0\n..          ...       ...         ...         ...         ...\n871         1.0       0.0         0.0         0.0         1.0\n872         0.0       1.0         0.0         0.0         1.0\n879         1.0       0.0         1.0         0.0         0.0\n887         1.0       0.0         0.0         0.0         1.0\n889         0.0       1.0         1.0         0.0         0.0\n\n[183 rows x 5 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sex_female</th>\n      <th>Sex_male</th>\n      <th>Embarked_C</th>\n      <th>Embarked_Q</th>\n      <th>Embarked_S</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>871</th>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>872</th>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>879</th>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>183 rows × 5 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train = train.drop(columns=['Sex', 'Embarked'])\ntrain = pd.concat([train, encoded], axis = 1)\ntrain","metadata":{"execution":{"iopub.status.busy":"2024-09-26T00:29:02.648869Z","iopub.execute_input":"2024-09-26T00:29:02.649466Z","iopub.status.idle":"2024-09-26T00:29:02.693916Z","shell.execute_reply.started":"2024-09-26T00:29:02.649420Z","shell.execute_reply":"2024-09-26T00:29:02.692425Z"},"trusted":true},"execution_count":44,"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"     Pclass   Age  SibSp  Parch     Fare  Sex_female  Sex_male  Embarked_C  \\\n1         1  38.0      1      0  71.2833         1.0       0.0         1.0   \n3         1  35.0      1      0  53.1000         1.0       0.0         0.0   \n6         1  54.0      0      0  51.8625         0.0       1.0         0.0   \n10        3   4.0      1      1  16.7000         1.0       0.0         0.0   \n11        1  58.0      0      0  26.5500         1.0       0.0         0.0   \n..      ...   ...    ...    ...      ...         ...       ...         ...   \n871       1  47.0      1      1  52.5542         1.0       0.0         0.0   \n872       1  33.0      0      0   5.0000         0.0       1.0         0.0   \n879       1  56.0      0      1  83.1583         1.0       0.0         1.0   \n887       1  19.0      0      0  30.0000         1.0       0.0         0.0   \n889       1  26.0      0      0  30.0000         0.0       1.0         1.0   \n\n     Embarked_Q  Embarked_S  \n1           0.0         0.0  \n3           0.0         1.0  \n6           0.0         1.0  \n10          0.0         1.0  \n11          0.0         1.0  \n..          ...         ...  \n871         0.0         1.0  \n872         0.0         1.0  \n879         0.0         0.0  \n887         0.0         1.0  \n889         0.0         0.0  \n\n[183 rows x 10 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Sex_female</th>\n      <th>Sex_male</th>\n      <th>Embarked_C</th>\n      <th>Embarked_Q</th>\n      <th>Embarked_S</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>1</td>\n      <td>54.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>51.8625</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>3</td>\n      <td>4.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>16.7000</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>1</td>\n      <td>58.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>26.5500</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>871</th>\n      <td>1</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>52.5542</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>872</th>\n      <td>1</td>\n      <td>33.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5.0000</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>879</th>\n      <td>1</td>\n      <td>56.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>83.1583</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>1</td>\n      <td>19.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>1</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.0000</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>183 rows × 10 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn import tree\n\nmodel = tree.DecisionTreeClassifier(max_depth=3)\nmodel.fit(train, Y)\ntree.plot_tree(model, class_names=[str(i) for i in Y], filled=True, feature_names=train.columns)","metadata":{"execution":{"iopub.status.busy":"2024-09-26T00:29:02.695785Z","iopub.execute_input":"2024-09-26T00:29:02.696259Z","iopub.status.idle":"2024-09-26T00:29:03.510190Z","shell.execute_reply.started":"2024-09-26T00:29:02.696215Z","shell.execute_reply":"2024-09-26T00:29:03.508824Z"},"trusted":true},"execution_count":45,"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"[Text(0.4444444444444444, 0.875, 'Sex_male <= 0.5\\ngini = 0.441\\nsamples = 183\\nvalue = [60, 123]\\nclass = Sobreviveu'),\n Text(0.2222222222222222, 0.625, 'Fare <= 10.481\\ngini = 0.127\\nsamples = 88\\nvalue = [6, 82]\\nclass = Sobreviveu'),\n Text(0.1111111111111111, 0.375, 'gini = 0.0\\nsamples = 2\\nvalue = [2, 0]\\nclass = Sobreviveu'),\n Text(0.3333333333333333, 0.375, 'Age <= 3.0\\ngini = 0.089\\nsamples = 86\\nvalue = [4, 82]\\nclass = Sobreviveu'),\n Text(0.2222222222222222, 0.125, 'gini = 0.0\\nsamples = 1\\nvalue = [1, 0]\\nclass = Sobreviveu'),\n Text(0.4444444444444444, 0.125, 'gini = 0.068\\nsamples = 85\\nvalue = [3, 82]\\nclass = Sobreviveu'),\n Text(0.6666666666666666, 0.625, 'Age <= 17.5\\ngini = 0.491\\nsamples = 95\\nvalue = [54, 41]\\nclass = Sobreviveu'),\n Text(0.5555555555555556, 0.375, 'gini = 0.0\\nsamples = 8\\nvalue = [0, 8]\\nclass = Sobreviveu'),\n Text(0.7777777777777778, 0.375, 'Age <= 43.0\\ngini = 0.471\\nsamples = 87\\nvalue = [54, 33]\\nclass = Sobreviveu'),\n Text(0.6666666666666666, 0.125, 'gini = 0.499\\nsamples = 48\\nvalue = [25, 23]\\nclass = Sobreviveu'),\n Text(0.8888888888888888, 0.125, 'gini = 0.381\\nsamples = 39\\nvalue = [29, 10]\\nclass = Sobreviveu')]"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"predict = model.predict(train)","metadata":{"execution":{"iopub.status.busy":"2024-09-26T00:29:03.511705Z","iopub.execute_input":"2024-09-26T00:29:03.512116Z","iopub.status.idle":"2024-09-26T00:29:03.520461Z","shell.execute_reply.started":"2024-09-26T00:29:03.512068Z","shell.execute_reply":"2024-09-26T00:29:03.519283Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"from sklearn.base import BaseEstimator, TransformerMixin\n\nclass RemoveNan(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        ...\n    def fit(self, X, y=None):\n        return self  # The fit method typically does nothing for transformers\n    def transform(self, X):\n        return X.dropna()\n    \nclass CategoricalTransformer(BaseEstimator, TransformerMixin):\n    def __init__(self, columns = list()):\n        self.columns = columns\n    def fit(self, X, y=None):\n        return self  # The fit method typically does nothing for transformers\n    def transform(self, X):\n        from sklearn.preprocessing import OneHotEncoder\n        encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False).set_output(transform='pandas')\n        encoded = encoder.fit_transform(X[self.columns])\n        \n        return pd.concat([X, encoded],axis=1).drop(columns=self.columns)","metadata":{"execution":{"iopub.status.busy":"2024-09-26T00:29:03.522211Z","iopub.execute_input":"2024-09-26T00:29:03.522642Z","iopub.status.idle":"2024-09-26T00:29:03.535548Z","shell.execute_reply.started":"2024-09-26T00:29:03.522600Z","shell.execute_reply":"2024-09-26T00:29:03.534160Z"},"trusted":true},"execution_count":47,"outputs":[]},{"cell_type":"code","source":"test = pd.read_csv('/kaggle/input/titanic/test.csv')\ntest\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\n\npipeline = Pipeline([('removeNan', RemoveNan()), ('catTransformer', CategoricalTransformer(['Sex', 'Embarked'])), ('model', model)])\ndisplay(pipeline)\ndisplay({1:'', 'as': 90})","metadata":{"execution":{"iopub.status.busy":"2024-09-26T00:29:03.537239Z","iopub.execute_input":"2024-09-26T00:29:03.537666Z","iopub.status.idle":"2024-09-26T00:29:03.570747Z","shell.execute_reply.started":"2024-09-26T00:29:03.537626Z","shell.execute_reply":"2024-09-26T00:29:03.569484Z"},"trusted":true},"execution_count":48,"outputs":[{"output_type":"display_data","data":{"text/plain":"Pipeline(steps=[('removeNan', RemoveNan()),\n                ('catTransformer',\n                 CategoricalTransformer(columns=['Sex', 'Embarked'])),\n                ('model', DecisionTreeClassifier(max_depth=3))])","text/html":"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;removeNan&#x27;, RemoveNan()),\n                (&#x27;catTransformer&#x27;,\n                 CategoricalTransformer(columns=[&#x27;Sex&#x27;, &#x27;Embarked&#x27;])),\n                (&#x27;model&#x27;, DecisionTreeClassifier(max_depth=3))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;removeNan&#x27;, RemoveNan()),\n                (&#x27;catTransformer&#x27;,\n                 CategoricalTransformer(columns=[&#x27;Sex&#x27;, &#x27;Embarked&#x27;])),\n                (&#x27;model&#x27;, DecisionTreeClassifier(max_depth=3))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RemoveNan</label><div class=\"sk-toggleable__content\"><pre>RemoveNan()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" ><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">CategoricalTransformer</label><div class=\"sk-toggleable__content\"><pre>CategoricalTransformer(columns=[&#x27;Sex&#x27;, &#x27;Embarked&#x27;])</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" ><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(max_depth=3)</pre></div></div></div></div></div></div></div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"{1: '', 'as': 90}"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn import metrics\n\npred_acc = metrics.accuracy_score(Y, predict)\ndisplay(pred_acc)\n\npred_conf = metrics.confusion_matrix(Y, predict)\npred_conf_matrix = pd.DataFrame(pred_conf, index=['False', \"True\"], columns=['False', \"True\"])\ndisplay(pred_conf_matrix)\n\npred_pre = metrics.average_precision_score(Y, predict, pos_label='Sovre')\ndisplay(pred_pre)","metadata":{"execution":{"iopub.status.busy":"2024-09-26T00:29:03.574456Z","iopub.execute_input":"2024-09-26T00:29:03.575073Z","iopub.status.idle":"2024-09-26T00:29:03.652881Z","shell.execute_reply.started":"2024-09-26T00:29:03.575013Z","shell.execute_reply":"2024-09-26T00:29:03.651435Z"},"trusted":true},"execution_count":49,"outputs":[{"output_type":"display_data","data":{"text/plain":"0.8032786885245902"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"       False  True\nFalse     57     3\nTrue      33    90","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>False</th>\n      <th>True</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>False</th>\n      <td>57</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>True</th>\n      <td>33</td>\n      <td>90</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[49], line 10\u001b[0m\n\u001b[1;32m      7\u001b[0m pred_conf_matrix \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mDataFrame(pred_conf, index\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mFalse\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTrue\u001b[39m\u001b[38;5;124m\"\u001b[39m], columns\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mFalse\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTrue\u001b[39m\u001b[38;5;124m\"\u001b[39m])\n\u001b[1;32m      8\u001b[0m display(pred_conf_matrix)\n\u001b[0;32m---> 10\u001b[0m pred_pre \u001b[38;5;241m=\u001b[39m \u001b[43mmetrics\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43maverage_precision_score\u001b[49m\u001b[43m(\u001b[49m\u001b[43mY\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpredict\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     11\u001b[0m display(pred_pre)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py:227\u001b[0m, in \u001b[0;36maverage_precision_score\u001b[0;34m(y_true, y_score, average, pos_label, sample_weight)\u001b[0m\n\u001b[1;32m    225\u001b[0m     present_labels \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39munique(y_true)\u001b[38;5;241m.\u001b[39mtolist()\n\u001b[1;32m    226\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(present_labels) \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m2\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m pos_label \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m present_labels:\n\u001b[0;32m--> 227\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    228\u001b[0m             \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpos_label=\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mpos_label\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m is not a valid label. It should be \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    229\u001b[0m             \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mone of \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mpresent_labels\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    230\u001b[0m         )\n\u001b[1;32m    231\u001b[0m average_precision \u001b[38;5;241m=\u001b[39m partial(\n\u001b[1;32m    232\u001b[0m     _binary_uninterpolated_average_precision, pos_label\u001b[38;5;241m=\u001b[39mpos_label\n\u001b[1;32m    233\u001b[0m )\n\u001b[1;32m    234\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m _average_binary_score(\n\u001b[1;32m    235\u001b[0m     average_precision, y_true, y_score, average, sample_weight\u001b[38;5;241m=\u001b[39msample_weight\n\u001b[1;32m    236\u001b[0m )\n","\u001b[0;31mValueError\u001b[0m: pos_label=1 is not a valid label. It should be one of ['Não sobreviveu', 'Sobreviveu']"],"ename":"ValueError","evalue":"pos_label=1 is not a valid label. It should be one of ['Não sobreviveu', 'Sobreviveu']","output_type":"error"}]}]}